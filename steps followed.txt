##Face Matching App Setup Guide
#Step 1: Initialize the Vite + React Project
In the terminal:

npm create vite@latest face-matching-app -- --template react
cd face-matching-app
npm install

#Step 2: Install TailwindCSS and Configure
TailwindCSS and its peer dependencies were installed:

tailwind.config.js and postcss.config.js files were created.

Created src/styles.css.

Added "build:css": "postcss src/styles.css -o public/styles.css" into package.json.

Created index.html in the public/ folder.

#Step 3: Install TailwindCSS CLI and Configure
Run the following command to install TailwindCSS CLI:

npm install -D tailwindcss-cli
Initialize TailwindCSS configuration:

npx tailwindcss-cli init -p
Run the development server:

npm run dev
This gave an error. So, rename postcss.config.js to postcss.config.cjs.

Error Fixed:

Install @tailwindcss/postcss:

npm install -D @tailwindcss/postcss
Modify postcss.config.cjs:

module.exports = {
  plugins: {
    '@tailwindcss/postcss': {},
    autoprefixer: {},
  },
}
Now, everything is set up correctly.

#Step 4: Setting Up Pages
Created src/pages/ where .jsx files are added for different pages required.

These pages are linked and routed in App.jsx.


Step5 : emoji detection Feature
npm install react-webcam
npm install face-api.js
created two files 
 public/models/tiny_face_detector_model-weights_manifest.json
 public/models/face_expression_model-weights_manifest.json
 public/models/face_expression_model-shard1
 public/models/tiny_face_detector_model-shard1
 {from (already trained models) https://github.com/justadudewhohacks/face-api.js-models/tree/master} 

They are loaded in your React component via face-api.js like this:

await faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL);
await faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL);
Here:

MODEL_URL = process.env.PUBLIC_URL + "/models" resolves to /models (which is inside your public/ folder).

loadFromUri() tells face-api.js to fetch the model files (like tiny_face_detector_model-weights_manifest.json, and corresponding .bin files) from that location.


 fetch('/models/tiny_face_detector_model-weights_manifest.json')
 → parses it
 → fetches the referenced binary weight files
 → builds the model in memory using TensorFlow.js


|           Model            |                     Purpose                          |
|----------------------------|------------------------------------------------------|
| `tiny_face_detector_model` | Fast and lightweight face detector (bounding boxes). |
| `face_expression_model`    | Classifies expressions like happy, sad, angry, etc. once a face is detected. |